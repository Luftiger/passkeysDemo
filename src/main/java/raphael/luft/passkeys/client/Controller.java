package raphael.luft.passkeys.client;import javafx.fxml.FXML;import javafx.scene.control.Button;import javafx.scene.control.ChoiceDialog;import javafx.scene.control.TextField;import javafx.scene.web.WebView;import raphael.luft.passkeys.client.helpers.AuthenticationResponse;import raphael.luft.passkeys.client.helpers.Connection;import raphael.luft.passkeys.client.helpers.Database;import raphael.luft.passkeys.client.helpers.RegistrationResponse;import java.util.Objects;import java.util.Optional;/** * Die Controller-Klasse für die PassKeys-Anwendung. Steuert die Benutzeroberfläche und behandelt * die Benutzerinteraktionen. */public class Controller {    private StringBuilder outputSb;    private Connection connection;    private Database database;    private String inputUsername;    private boolean loggedIn;    @FXML    private TextField usernameField;    @FXML    private Button registrationBtn;    @FXML    private Button signInBtn;    @FXML    private Button connectionBtn;    @FXML    private WebView outputArea;    /**     * Initialisiert die outputArea WebView mit einem benutzerdefinierten Stylesheet und erstellt den outputSb StringBuilder.     */    @FXML    public void initialize() {        try {            this.outputArea.getEngine().setUserStyleSheetLocation(Objects.requireNonNull(getClass().getResource("style.css")).toString());        } catch (NullPointerException ignored) {}        this.outputSb = new StringBuilder();    }    /**     * ActionsHandler für den Button "Verbinden".     * Stellt eine Verbindung zum Server und zur Datenbank her.     */    @FXML    public void ConnectionHandler() {        this.connection = new Connection("localhost", 5000);        boolean c = this.connection.connect();        if (c) {            addOutput("<p class='important'>Verbindung hergestellt</p>");            this.usernameField.setDisable(false);            this.registrationBtn.setDisable(false);            this.signInBtn.setDisable(false);            this.connectionBtn.setText("Verbunden");            this.connectionBtn.setDisable(true);            this.database = new Database("data/clientDB.db");            String s = this.database.connect();            if (s.equals("s")) {                addOutput("</p>Verbindung zur Datenbank hergestellt...</p>");                s = this.database.createTable();                if(s.equals("s")) {                    addOutput("<p>Tabelle wurde angelegt...</p>");                }            } else {                addOutput("<p class='warning'>Fehler bei Verbindung zur Datenbank: " + s + "</p>");                addOutput("<p class='warning'>Bitte starten Sie das Programm neu.</p>");            }        } else addOutput("<p class='warning'>Fehler beim Verbindungsaufbau, bitte versuchen Sie es erneut.</p>");    }    /**     * ActionHandler für die Benutzerregistrierung.     * Überprüft die Gültigkeit des Benutzernamens und sendet die Registrierungsanfrage an den Server.     */    @FXML    public void RegistrationHandler() {        this.inputUsername = this.usernameField.getText();        if (usernameIsValid()) { // Wenn der angegebene Benutzername den Bedingungen entspricht            addOutput("<p class='important'>Registrierung läuft...</p>");            this.connection.send("[RA]");            String msg = this.connection.receive();            try {                if (msg.startsWith("[O]")) { // Wenn der Server keinen Fehler bei Anfrage aufwirft                    // dann: sende RegistrationResponse                    RegistrationResponse registrationResponse = new RegistrationResponse(msg, this.inputUsername);                    String resp = registrationResponse.generateResponse();                    this.database.addCredential(registrationResponse);                    this.connection.send(resp);                    addOutput("<p>RegistrationResponse wurde gesendet...</p>");                    msg = this.connection.receive();                    if (msg.equals("accepted")) { // Wenn der Server die Antwort akzeptiert                        this.setLoggedIn();                        addOutput("<p class='important'>Registrierung erfolgreich. Sie sind angemeldet.");                    } else { // Sonst, wenn Server ablehnt                        addOutput("<p class='warning'>Registrierung vom Server abgelehnt, bitte versuchen Sie es erneut.</p>");                        this.database.removeCredential(registrationResponse.getId());                    }                } else { // Sonst, wenn Fehler bei Registrieranfrage                    addOutput("<p class='warning'>Registrierung vom Server abgelehnt, bitte versuchen Sie es erneut.</p>");                }            } catch (NullPointerException e) {                this.signInBtn.setDisable(true);                this.registrationBtn.setDisable(true);                addOutput("<p class='warning'>Verbindung zum Server verloren. Bitte starten Sie das Programm neu.</p>");            }        } else{ // Sonst, wenn Nutzername fehlerhaft            addOutput("<p class='warning'>Der von Ihnen gewählte Username muss folgende Regeln erfüllen: <br>"                    + "- mindestens 5 Zeichen lang sein<br>"                    + "- nur aus Buchstaben und Zahlen bestehen</p>");        }    }    /**     * ActionHandler für die Benutzerauthentifizierung.     * Koordiniert die Auswahl eines Schlüssels und den Austausch von Authentifizierungsinformationen mit dem Server.     */    @FXML    public void AuthenticationHandler() {        if (!loggedIn) { // Wenn noch nicht angemeldet            String[] message = database.getAllDisplayNames();            if (message.length > 0) {                ChoiceDialog<String> dialog = new ChoiceDialog<>(message[0], message);                dialog.setContentText("Bitte einen Schlüssel auswählen: ");                dialog.setHeaderText("Anmeldung");                dialog.setTitle("Auswahl");                Optional<String> result = dialog.showAndWait();                if (result.isPresent()) {                    String selected = dialog.getSelectedItem();                    AuthenticationResponse response = database.getCredentialByName(selected);                    if (response == null) {                        addOutput("<p class='warning'>Der gespeicherte privateKey manuell verändert. "                                    + "Ein Anmeldevorgang mit dem gewählt Account ist nicht mehr möglich. "                                    + "Der Account wird gelöscht.</p>");                        database.removeCredential(selected);                        return ;                    }                    this.connection.send("[AA]|" + response.getId());                    String msg = this.connection.receive();                    try {                        if (msg.startsWith("[O]")) {                            response.setOptions(msg);                            String resp = response.generateResponse();                            if (resp.startsWith("Beim")) {                                addOutput("<p class='warning'>" + resp + "</p>");                                return ;                            } else this.connection.send(resp);                            addOutput("<p>AuthenticationResponse wurde gesendet...</p>");                            msg = this.connection.receive();                            if (msg.equals("verified")) {                                this.setLoggedIn();                                addOutput("<p class='important'>Sie sind angemeldet.");                            } else {                                addOutput("<p class='warning'>Anmeldedaten vom Server abgelehnt, bitte versuchen Sie es erneut.</p>");                            }                        } else {                            addOutput("<p class='warning'>Anmeldung vom Server abgelehnt, bitte versuchen Sie es erneut.</p>");                        }                    } catch (NullPointerException e) {                        this.signInBtn.setDisable(true);                        this.registrationBtn.setDisable(true);                        addOutput("<p class='warning'>Verbindung zum Server verloren. Bitte starten Sie das Programm neu.</p>");                    }                } else {                    addOutput("<p>Anmeldung wurde abgebrochen, weil kein Schlüssel gewählt wurde.</p>");                }            } else addOutput("<p class='warning'>Anmeldung wurde abgebrochen, weil keine Schlüssel in der Datenbank gefunden wurden.</p>");        }    }    /**     * Setzt den Benutzerstatus auf "angemeldet" und passt die Benutzeroberfläche entsprechend an.     */    private void setLoggedIn() {        this.loggedIn = true;        this.registrationBtn.setDisable(true);        this.signInBtn.setDisable(true);    }    /**     * Überprüft, ob der eingegebene Benutzername den Vorgaben entspricht:     * Dieser muss mindestens 5 Zeichen lang sein und darf nur Buchstaben und Zahlen enthalten.     *     * @return true, wenn der Benutzername gültig ist, sonst false.     */    private boolean usernameIsValid() {        if (this.inputUsername != null && this.inputUsername.length() >= 5) {            return this.inputUsername.matches("[a-zA-Z0-9]+");        }        return false;    }    /**     * Fügt den übergebenen Text zum Ausgabe-StringBuilder hinzu und aktualisiert die Anzeige.     *     * @param s Der Text, der zur Ausgabe hinzugefügt werden soll.     */    private void addOutput(String s) {        this.outputSb.append(s);        this.outputArea.getEngine().loadContent(this.outputSb.toString());    }}